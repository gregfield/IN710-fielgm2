using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TestVS2015
{
    public enum SuitValue : int
    {
        Spades, Hearts, Diamonds, Clubs
    }

    public enum RankValue : int
    {
        Ace, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King
    }

    public class Card: IComparable  // We want to be able to sort Hands
    {
        public SuitValue Suit {  get; set;}

        private string shortRank;
        public String ShortRank
        {
            get
            {
                return shortRank;
            }
        }

        private RankValue rank;
        public RankValue Rank
        {
            get
            {
                return rank;
            }
 
            set
            {
                rank = value;
                switch (rank)
                {
                    case RankValue.Ace:
                        shortRank = "A";
                        break;
                    case RankValue.King:
                        shortRank = "K";
                        break;
                    case RankValue.Queen:
                        shortRank = "Q";
                        break;
                    case RankValue.Jack:
                        shortRank = "J";
                        break;
                    case RankValue.Ten:
                        shortRank = "T";
                        break;
                    default:
                        int rankOrdinalPosition = (int)rank;
                        shortRank = rankOrdinalPosition.ToString();
                        break;
                } // end switch
            } // end set
        }



        public int HCP
        {
            get; set;
        }

        public Card(SuitValue initSuit, RankValue initRank)
        //------------------------------------------------
        // CCard(SuitValue suit, CardValue number)
        //
        // Precondition: suit must be a value in the SuitValue enumerator. number must be a value in the CardValue enumerator.
        // Postcondition: Sets up the default properties.
        //------------------------------------------------
        {
            Suit = initSuit;
            Rank = initRank;

            HCP = 0;
            switch(Rank)
            {
                case RankValue.Ace:
                    HCP = 4;
                    break;
                case RankValue.King:
                    HCP = 3;
                    break;
                case RankValue.Queen:
                    HCP = 2;
                    break;
                case RankValue.Jack:
                    HCP = 1;
                    break;
            }

        }

        public override string ToString()
        //------------------------------------------------
        // string ToString()
        //
        // Precondition: None.
        // Postcondition: Returns the suit and card number of the enumerators.
        //------------------------------------------------
        {
            return (Rank.ToString() + " of " + Suit.ToString());
        }

        public int CompareTo(object obj)
        {
            //Cards will sort from largest to smallest, so this is the reverse of the default
            // If you are less than obj, return 1
            // If you equal obj, return 0
            // If you are greater than obj, return -1

            RankValue myRank = Rank;
            SuitValue mySuit = Suit;
            RankValue otherGuyRank = (obj as Card).Rank;
            SuitValue otherGuysuit = (obj as Card).Suit;

            // Two cards from the same suit.
            if (mySuit == otherGuysuit)
            {
                if (myRank < otherGuyRank)
                    return -1;
                else if (myRank == otherGuyRank)
                    return 0;
                else return 1;            
            }

            // If you reach this point, the two cards are from different suits.
            // With two cards from different suits, you don't need to worry about rank
            if (mySuit < otherGuysuit)
                return -1;
            else
                return 1;

        }
    }
}
